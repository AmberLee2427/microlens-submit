name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build_wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ENVIRONMENT: MICROLENS_SKIP_EDITABLE_INSTALL=1
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest --maxfail=1 --disable-warnings -q

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Build source distribution
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  verify_artifacts:
    name: Verify artifacts
    runs-on: ubuntu-latest
    needs:
      - build_wheels
      - build_sdist
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Verify installation
        run: |
          python -m venv dist-env
          . dist-env/bin/activate
          pip install --upgrade pip
          pip install pytest
          WHL=$(ls dist/*.whl | head -n 1)
          pip install "$WHL"
          python scripts/verify_cli_install.py
          MICROLENS_SKIP_EDITABLE_INSTALL=1 PATH="$PWD/dist-env/bin:$PATH" pytest --maxfail=1 --disable-warnings -q

  build_conda:
    name: Build Conda package
    runs-on: ubuntu-latest
    needs:
      - verify_artifacts
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: build
          python-version: 3.11
          auto-update-conda: false
          auto-activate-base: false
          add-pip-as-python-dependency: true
          channels: conda-forge,defaults

      - name: Install conda-build tooling
        shell: bash -l {0}
        run: conda install -n build -y conda-build anaconda-client

      - name: Build Conda package
        shell: bash -l {0}
        run: conda run -n build conda build conda/recipe

      - name: Upload Conda artifact
        shell: bash -l {0}
        run: |
          OUTPUT=$(conda run -n build conda build conda/recipe --output)
          mkdir -p conda-dist
          cp "$OUTPUT" conda-dist/

      - name: Upload Conda package artifact
        uses: actions/upload-artifact@v4
        with:
          name: conda-package
          path: conda-dist/*.tar.bz2

  publish_pypi:
    name: Publish to PyPI
    needs:
      - verify_artifacts
      - build_conda
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Collect Conda packages
        run: |
          shopt -s globstar
          mkdir -p dist/conda-dist
          for file in dist/**/*.tar.bz2; do
            [ -f "$file" ] || continue
            cp "$file" dist/conda-dist/
          done

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true

  github_release:
    name: Create GitHub release
    needs:
      - publish_pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          path: dist
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
            dist/conda-dist/*.tar.bz2
          body_path: RELEASE_NOTES.md
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
